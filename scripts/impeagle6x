#! /bin/sh

version=033

#reads EAGLE netlist and partlist
#command is:	impeagle6x netlist.net partlist.part
#written by MBL

# 	overwrite_main_module=no
# 	overwrite_sub_module=no
# 	[ -e skeleton.txt ] &&
# 		{
# 		echo 'WARNING ! CAD data for main module already exists.'
# 		echo -n '          Overwrite existing data set ? (y/n/c) '
# 		read key
# 		[ "$key" != "y" -a "$key" != "n" ] && 
# 					{
# 					echo 'CAD data import cancelled'
# 					exit 1;
# 					}
# 
# 		[ "$key" = "y" ] && 
# 			{
# 			overwrite_main_module=yes
# 			break
# 			}
# 		[ "$key" = "n" ] && 
# 			{
# 			overwrite_sub_module=yes
# 			#echo $overwrite_sub_module	
# 			echo 'Importing CAD data as UUT submodule.'
# 			echo -n 'Enter submodule name : '
# 			read sub_name;
# 			[ -e skeleton_$sub_name.txt ] &&
# 				{ 
# 				echo 'WARNING ! Cad data for submodule '$sub_name' already exists.'
# 				echo -n '          Overwrite existing data set ? (y/n/c) '
# 				read key2
# 				[ "$key2" != "y" ] && 
# 					{
# 					echo 'CAD data import cancelled'
# 					exit 1;
# 					}
# 				}
# 			}
# 		}



# clean up tmp directory
	touch tmp/dummy.tmp	#CS: try more elegant way !
	rm tmp/*.tmp

#read files passed to this script into shell variables
	netlist=$1
	partlist=$2
	target=$3
	prefix=$4

	echo
	echo "net and partlist importer EAGLE V6 version" $version
	echo 'netlist        : '$netlist 
	echo 'partlist       : '$partlist
	echo 'target         : '$target
	echo 'prefix         : '$prefix
	echo

	echo 'Section info' > tmp/np.tmp

# 	[ "$overwrite_sub_module" = "yes" ] && echo ' -- netlist skeleton submodule' >> tmp/np.tmp
# 	[ "$overwrite_sub_module" = "no" ] && echo ' -- netlist skeleton' >> tmp/np.tmp
	[ "$target" = "main" ] && echo ' -- netlist skeleton' >> tmp/np.tmp
	[ "$target" = "sub"  ] && echo ' -- netlist skeleton submodule' >> tmp/np.tmp
	echo ' -- created by impeagle6x version' $version >> tmp/np.tmp
	echo -n ' -- ' >> tmp/np.tmp
	date >> tmp/np.tmp
	echo "-----------------------------------------------------------------------------------" >> tmp/np.tmp


##############################################

#read netlist
	echo '- processing nets'


	#cut away header
	lp=1
	netlist_exported_from_sch="no"
	while read -a line
	do
		#echo $lp ${#line[*]}
		[ "$lp" -eq 1 ] && echo " --" ${line[*]} $1 >> tmp/np.tmp #tmp/nl.tmp
		[ "$lp" -eq 3 ] && echo " --" ${line[*]} >> tmp/np.tmp #tmp/nl.tmp
		[ "$lp" -eq 5 ] && ( echo " --" ${line[*]} >> tmp/np.tmp ; echo >> tmp/np.tmp;)
		[ "$lp" -eq 7 ] && [ ${#line[*]} -gt 3 ] && 
			{
			netlist_exported_from_sch="yes"
			echo "NOTE    : It appears the netlist has been exported from a schematic."
			echo " -- NOTE    : It appears the netlist has been exported from a schematic." >> tmp/np.tmp;
			}
		[ "$lp" -eq 7 ] && [ ${#line[*]} -eq 3 ] && 
			{
			netlist_exported_from_sch="no"
			echo "NOTE    : It appears the netlist has been exported from a board."
			echo " -- NOTE    : It appears the netlist has been exported from a board." >> tmp/np.tmp;
			}


		#write netto data starting in line 9 in temp file
		[ "$lp" -gt 8 ] && echo ${line[*]} >> tmp/nets.tmp

		#advance line pointer
		lp=$[lp+1]
	done < $netlist
	# netto data of netlist ready in tmp/nets.tmp


	#filter netname, part and pad
	procedure_count_pins() 
		{
		pincount=$[pincount+1]
		}

	netcount=0
	pincount=0
	while IFS=" " read -a v
	do
		# if netlist exported from brd:
		#check parameter count greater than 3 (e.g. net names containing space characters)
		[ "$netlist_exported_from_sch" = "no" ] && [ ${#v[*]} -gt 3 ] &&
			(
			echo "WARNING ! Bad parameter count in net ${v[0]}, please check netlist" >> tmp/np.tmp #tmp/nl.tmp ;
			echo "          Troubleshooting measures:" >> tmp/np.tmp
			echo "          1. Make sure netname does not contain space characters !" >> tmp/np.tmp
			);

		# if netlist exported from sch:
		#check parameter count greater than 5 (e.g. net names containing space characters)
		[ "$netlist_exported_from_sch" = "yes" ] && [ ${#v[*]} -gt 5 ] &&
			(
			echo "WARNING ! Bad parameter count in net ${v[0]}, please check netlist" >> tmp/np.tmp #tmp/nl.tmp ;
			echo "          Troubleshooting measures:" >> tmp/np.tmp
			echo "          1. Make sure netname does not contain space characters !" >> tmp/np.tmp
			);


		#write net-end marker
		[ "$netlist_exported_from_sch" = "yes" ] && [ ${#v[*]} -eq 5 ] && [ "$netcount" -gt 0 ] && echo :end >> tmp/nets2.tmp
		[ "$netlist_exported_from_sch" = "no" ]  && [ ${#v[*]} -eq 3 ] && [ "$netcount" -gt 0 ] && echo :end >> tmp/nets2.tmp
		#count nets
		[ "$netlist_exported_from_sch" = "yes" ] && [ ${#v[*]} -eq 5 ] && netcount=$[netcount+1] ;
		[ "$netlist_exported_from_sch" = "no" ] && [ ${#v[*]} -eq 3 ] && netcount=$[netcount+1] ;


		#check for line with net name
		[ "$netlist_exported_from_sch" = "no" -a ${#v[*]} -eq 3 ] && procedure_count_pins &&
			#extract line with net field into temp file
			(
				#CS: check if netname contains a forbidden colon ":" and replace by "c_"
				#CS: otherwise chkpsn will not work properly
				echo :net ${v[0]} >> tmp/nets2.tmp ;
				#	echo "reading net no." $netcount "name: "${v[0]} ;
				#print out net number being processed
				echo -n -e "\r$netcount"
				echo ${v[1]} ${v[2]} >> tmp/nets2.tmp;
			)

		[ "$netlist_exported_from_sch" = "yes" -a ${#v[*]} -eq 5 ] && procedure_count_pins &&
			#extract line with net field into temp file
			(
				#CS: check if netname contains a forbidden colon ":" and replace by "c_"
				#CS: otherwise chkpsn will not work properly
				echo :net ${v[0]} >> tmp/nets2.tmp ;
				#	echo "reading net no." $netcount "name: "${v[0]} ;
				#print out net number being processed
				echo -n -e "\r$netcount"
				echo ${v[1]} ${v[2]} >> tmp/nets2.tmp;
			)

		#check for lines without net name
		[ "$netlist_exported_from_sch" = "no" -a ${#v[*]} -eq 2 ] && procedure_count_pins && 
			#extract lines without net field into temp file
			(
				echo ${v[0]} ${v[1]} >> tmp/nets2.tmp
			)

		[ "$netlist_exported_from_sch" = "yes" -a ${#v[*]} -eq 4 ] && procedure_count_pins &&
			#extract lines without net field into temp file
			(
				echo ${v[0]} ${v[1]} >> tmp/nets2.tmp
			)
		

	done < tmp/nets.tmp
	#append end marker to last net
	echo :end >> tmp/nets2.tmp



	echo ' --' $netcount nets imported >> tmp/np.tmp #tmp/nl.tmp
	echo ' --' Please verify net count against CAD tool ! >> tmp/np.tmp #tmp/nl.tmp
	echo "-----------------------------------------------------------------------------------" >> tmp/np.tmp #tmp/nl.tmp
	echo

	#copy to result file
	mv tmp/nets2.tmp tmp/netlist.tmp


	#clean up
	rm tmp/nets.tmp


# nets, parts, pins ready in tmp/netlist.tmp
#################################################






##############################################
#read partlist
	echo
	echo '- processing parts'


	#cut away header
	lp=1
	partlist_exported_from_sch="no"
	while read -a line
	do
		#write header into log/import.log
		[ "$lp" -eq 1 ] && echo " --" ${line[*]} $2 >> tmp/np.tmp #tmp/nl.tmp
		[ "$lp" -eq 3 ] && echo " --" ${line[*]} >> tmp/np.tmp #tmp/nl.tmp
		[ "$lp" -eq 5 ] && (echo " --" ${line[*]} >> tmp/np.tmp ; echo >> tmp/np.tmp )
		[ "$lp" -eq 7 ] &&
			{
			[ ${line[0]} = "Assembly" ] && [ ${#line[*]} -gt 2 ] # assembly variant defined
				{
				echo "NOTE    :" ${line[*]}
				echo " -- NOTE    :" ${line[*]} >> tmp/np.tmp
				}
			[ ${line[0]} = "Assembly" ] && [ ${#line[*]} -eq 2 ] && # no assembly variant defined
				{
				echo "NOTE    : Default assembly variant found."
				echo " -- NOTE    : Default assembly variant found." >> tmp/np.tmp
				}
			[ ${line[0]} != "Assembly" ] && # no assembly entry at all
				{
				echo "ERROR   : Partlist faulty or format is of an earlier EAGLE version than 6.x."
				echo " -- NOTE    : Partlist faulty or format is of an earlier EAGLE version than 6.x." >> tmp/np.tmp
				exit 1
				}
			}

		# find out if partlist origin is brd or sch
		[ "$lp" -eq 9 ] && [ "${line[2]}" = "Device" ] && 
			{
			partlist_exported_from_sch="yes"
			echo "NOTE    : It appears the partlist has been exported from a schematic."
			echo " -- NOTE    : It appears the partlist has been exported from a schematic." >> tmp/np.tmp;
			}

		[ "$lp" -eq 9 ] && [ "${line[2]}" = "Package" ] && 
			{
			partlist_exported_from_sch="no"
			echo "NOTE    : It appears the partlist has been exported from a board."
			echo " -- NOTE    : It appears the partlist has been exported from a board." >> tmp/np.tmp;
			}


		#write netto data in temp file
		[ "$lp" -gt 10 ] && echo ${line[*]} >> tmp/parts.tmp  # ins V2.22

		#advance line pointer
		lp=$[lp+1]
	done < $partlist
	# netto data of partlist ready in tmp/parts.tmp

#exit

	#filter part,value and package
	partcount=0
	#read line per line into array v
	while IFS=" " read -a v
	do
		#check array length
		#[ ${#v[*]} -ne 6 ] && #rm V2.22
		#echo ${v[*]} >> tmp/np.tmp
		#write part, value, package into temp file
		[ "$partlist_exported_from_sch" = "no" ] && 
			{
			[ ${#v[*]} -eq 7 ] &&
				{
				echo ${v[0]} ${v[1]} ${v[2]} >> tmp/parts2.tmp
				};
			[ ${#v[*]} -ne 7 ] &&
				{
				echo " -- WARNING : Bad parameter count in part "${v[0]}", please check partlist !" >> tmp/np.tmp #tmp/nl.tmp ;
				echo " --           Missing parameter will be filled with keyword 'none'." >> tmp/np.tmp #tmp/nl.tmp ; # ins v031
				#echo ${v[0]} "none" ${v[1]} ${v[2]} >> tmp/parts2.tmp
				echo ${v[0]} "none" ${v[1]} >> tmp/parts2.tmp
				};
			};
		[ "$partlist_exported_from_sch" = "yes" ] && 
			{
			[ ${#v[*]} -eq 6 ] &&
				{
				echo ${v[0]} ${v[1]} ${v[3]} >> tmp/parts2.tmp
				};
			[ ${#v[*]} -ne 6 ] &&
				{
				echo " -- WARNING : Bad parameter count in part "${v[0]}", please check partlist !" >> tmp/np.tmp #tmp/nl.tmp ;
				echo " --           Missing parameter will be filled with keyword 'none'." >> tmp/np.tmp #tmp/nl.tmp ; # ins v031
				#echo ${v[0]} "none" ${v[1]} ${v[3]} >> tmp/parts2.tmp
				echo ${v[0]} "none" ${v[1]} >> tmp/parts2.tmp
				};
			};
		partcount=$[partcount+1];
	
		#echo "reading part no." $partcount "name: "${v[0]};
		echo -n -e "\r$partcount"

		#write part, value, package into temp file
#		[ "$partlist_exported_from_sch" = "no" ] && echo ${v[0]} ${v[1]} ${v[2]} >> tmp/parts2.tmp	# rm v031
#		[ "$partlist_exported_from_sch" = "yes" ] && echo ${v[0]} ${v[1]} ${v[3]} >> tmp/parts2.tmp # rm v031

	done < tmp/parts.tmp


	echo ' --' $partcount parts imported >> tmp/np.tmp
	echo ' --' $pincount pins imported >> tmp/np.tmp
	echo ' --' please verify part count against CAD tool ! >> tmp/np.tmp
	echo 'EndSection' >> tmp/np.tmp
	echo >> tmp/np.tmp
	echo

	#mv tmp/nl.tmp tmp/nl_cells.tmp

	#copy to result file
	mv tmp/parts2.tmp tmp/partlist.tmp

	#clean up
	rm tmp/parts.tmp



# parts, values, packages ready in tmp/partlist.tmp
###################################################

	echo
	echo '- merging net and partlist'
	echo 'Section netlist_skeleton' >> tmp/np.tmp


###################################################
#merge netlist.txt and partlist.txt

	lp=1
	while IFS=" " read -a n
	do
		lp=$[lp+1]
		#check for non-empty line in netlist
		[ ${#n[*]} -gt 0 ] && 
			(
				#find net name after string ":net", then write net name into np.tmp
				[ "${n[0]}"  = ":net" ] &&
				(
					#echo
					#echo -n -e "\r${n[1]}"
					echo -n -e "\r$lp" # output progress
					#echo ${n[1]}; 	#ver 1.0
					echo >> tmp/np.tmp #tmp/np.tmp ;
					#write net name into np.tmp
					#echo " SubSection "${n[1]} "class ?" >> tmp/np.tmp #tmp/np.tmp ; # rm V2.3
					echo " SubSection "${n[1]} "class NA" >> tmp/np.tmp #tmp/np.tmp ; # ins V2.3
					#write default class into np.tmp
					#echo "NET_CLASS:=?" >> tmp/np.tmp #tmp/np.tmp ;
					#echo "  --part class val pack pin port dir cell" >> tmp/np.tmp #tmp/np.tmp;
					#echo "  ---------------------------------------------------------" >> tmp/np.tmp #tmp/np.tmp;
				);

				#find net name after string ":net", then write net name into np.tmp
				[ "${n[0]}"  = ":end" ] &&
				(
					echo " EndSubSection" >> tmp/np.tmp #tmp/np.tmp ;
				);
		
				#if first field is neither :net or :end, then read part from partlist
				[ "${n[0]}" != ":net" ] && [ "${n[0]}" != ":end" ] &&
					(
					#read partlist
					while IFS=" " read -a p ;
					do
						#find part in partlist
						[ "${p[0]}" = "${n[0]}" ] &&  #on match
							(
							# write part name, part class, value, package, pin
							echo "  "${n[0]}" NA "${p[1]}" "${p[2]}" "${n[1]}" " >> tmp/np.tmp;
							break; #no need to further searching
							);
					done < tmp/partlist.tmp;
					);

			)
	done < tmp/netlist.tmp

	echo 'EndSection' >> tmp/np.tmp # tmp/nl.tmp

	#copy to result file
	#echo $overwrite_main_module
	#echo $overwrite_sub_module

	echo
	echo "----------------------------------------------------------------------"
	echo "imported nets : " $netcount
	echo "imported parts: " $partcount
	echo "imported pins : " $pincount
	echo


# 	[ "$overwrite_main_module" = "no" -a "$overwrite_sub_module" = "no" ] && 
# 		{
# 		cp tmp/np.tmp skeleton.txt # ins V2.4
# 		echo "NOTE: Please read "skeleton.txt" for warnings !" # ins V2.4
# 		}
# 
# 	[ "$overwrite_main_module" = "yes" ] && 
# 		{
# 		mv tmp/np.tmp skeleton.txt
# 		echo "NOTE: Please read "skeleton.txt" for warnings !"
# 		}
# 	[ "$overwrite_sub_module" = "yes" ] && 
#         {
# 		mv tmp/np.tmp skeleton_$sub_name.txt
# 		echo "NOTE: Please read "skeleton_$sub_name.txt" for warnings !"
#         }

	[ "$target" = "main" ] &&
		{
		mv tmp/np.tmp skeleton.txt
		echo "NOTE: Please read "skeleton.txt" for warnings !"
		}

	[ "$target" = "sub" ] &&
		{
		mv tmp/np.tmp skeleton_$prefix.txt
		echo "NOTE: Please read "skeleton_$prefix.txt" for warnings !"
		}

# np.txt ready
####################################################
	echo

exit 0

